#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
    Node(int x) : data(x), next(nullptr), prev(nullptr) {}
};

// ================= DOUBLY LINKED LIST =================

class DoublyLinkedList {
private:
    Node* head;
public:
    DoublyLinkedList() : head(nullptr) {}

    // Insert at beginning
    void insertAtBeginning(int x) {
        Node* newNode = new Node(x);
        if (!head) {
            head = newNode;
            return;
        }
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }

    // Insert at end
    void insertAtEnd(int x) {
        Node* newNode = new Node(x);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }

    // Insert after a specific node
    void insertAfterNode(int key, int x) {
        Node* temp = head;
        while (temp && temp->data != key)
            temp = temp->next;
        if (!temp) {
            cout << "Node " << key << " not found.\n";
            return;
        }
        Node* newNode = new Node(x);
        newNode->next = temp->next;
        newNode->prev = temp;
        if (temp->next)
            temp->next->prev = newNode;
        temp->next = newNode;
    }

    // Delete a node
    void deleteNode(int key) {
        Node* temp = head;
        while (temp && temp->data != key)
            temp = temp->next;
        if (!temp) {
            cout << "Node " << key << " not found.\n";
            return;
        }
        if (temp->prev)
            temp->prev->next = temp->next;
        else
            head = temp->next; // deleting head
        if (temp->next)
            temp->next->prev = temp->prev;
        delete temp;
        cout << "Node " << key << " deleted.\n";
    }

    // Search for a node
    void searchNode(int key) {
        Node* temp = head;
        int pos = 1;
        while (temp) {
            if (temp->data == key) {
                cout << "Node " << key << " found at position " << pos << ".\n";
                return;
            }
            temp = temp->next;
            pos++;
        }
        cout << "Node " << key << " not found.\n";
    }

    // Display list
    void display() {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        cout << "Doubly Linked List: ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

// ================= CIRCULAR DOUBLY LINKED LIST =================

class CircularDoublyLinkedList {
private:
    Node* head;
public:
    CircularDoublyLinkedList() : head(nullptr) {}

    void insertAtBeginning(int x) {
        Node* newNode = new Node(x);
        if (!head) {
            head = newNode;
            newNode->next = newNode->prev = newNode;
            return;
        }
        Node* tail = head->prev;
        newNode->next = head;
        newNode->prev = tail;
        tail->next = newNode;
        head->prev = newNode;
        head = newNode;
    }

    void insertAtEnd(int x) {
        Node* newNode = new Node(x);
        if (!head) {
            insertAtBeginning(x);
            return;
        }
        Node* tail = head->prev;
        tail->next = newNode;
        newNode->prev = tail;
        newNode->next = head;
        head->prev = newNode;
    }

    void insertAfterNode(int key, int x) {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        do {
            if (temp->data == key) {
                Node* newNode = new Node(x);
                newNode->next = temp->next;
                newNode->prev = temp;
                temp->next->prev = newNode;
                temp->next = newNode;
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Node " << key << " not found.\n";
    }

    void deleteNode(int key) {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        do {
            if (temp->data == key) {
                if (temp->next == temp) { // only one node
                    head = nullptr;
                    delete temp;
                    cout << "Node " << key << " deleted.\n";
                    return;
                }
                temp->prev->next = temp->next;
                temp->next->prev = temp->prev;
                if (temp == head)
                    head = temp->next;
                delete temp;
                cout << "Node " << key << " deleted.\n";
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Node " << key << " not found.\n";
    }

    void searchNode(int key) {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        int pos = 1;
        do {
            if (temp->data == key) {
                cout << "Node " << key << " found at position " << pos << ".\n";
                return;
            }
            temp = temp->next;
            pos++;
        } while (temp != head);
        cout << "Node " << key << " not found.\n";
    }

    void display() {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        cout << "Circular DLL: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

// ================= MENU =================
int main() {
    DoublyLinkedList dll;
    CircularDoublyLinkedList cdll;
    int choice, val, key;
    
    do {
        cout << "\nMenu:\n";
        cout << "1. DLL Insert at Beginning\n";
        cout << "2. DLL Insert at End\n";
        cout << "3. DLL Insert After Node\n";
        cout << "4. DLL Delete Node\n";
        cout << "5. DLL Search Node\n";
        cout << "6. DLL Display\n";
        cout << "7. CDLL Insert at Beginning\n";
        cout << "8. CDLL Insert at End\n";
        cout << "9. CDLL Insert After Node\n";
        cout << "10. CDLL Delete Node\n";
        cout << "11. CDLL Search Node\n";
        cout << "12. CDLL Display\n";
        cout << "0. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch(choice) {
            case 1: cout << "Enter value: "; cin >> val; dll.insertAtBeginning(val); break;
            case 2: cout << "Enter value: "; cin >> val; dll.insertAtEnd(val); break;
            case 3: cout << "Enter key and value: "; cin >> key >> val; dll.insertAfterNode(key,val); break;
            case 4: cout << "Enter value to delete: "; cin >> key; dll.deleteNode(key); break;
            case 5: cout << "Enter value to search: "; cin >> key; dll.searchNode(key); break;
            case 6: dll.display(); break;
            case 7: cout << "Enter value: "; cin >> val; cdll.insertAtBeginning(val); break;
            case 8: cout << "Enter value: "; cin >> val; cdll.insertAtEnd(val); break;
            case 9: cout << "Enter key and value: "; cin >> key >> val; cdll.insertAfterNode(key,val); break;
            case 10: cout << "Enter value to delete: "; cin >> key; cdll.deleteNode(key); break;
            case 11: cout << "Enter value to search: "; cin >> key; cdll.searchNode(key); break;
            case 12: cdll.display(); break;
            case 0: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice!\n";
        }
    } while(choice != 0);

    return 0;
}
